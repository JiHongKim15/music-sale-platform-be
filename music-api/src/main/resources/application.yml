server:
  port: ${SERVER_PORT:8080}
  error:
    include-stacktrace: ${INCLUDE_STACKTRACE:never}  # 운영시 스택트레이스 비활성화

spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}  # 환경변수로 프로파일 설정
  application:
    name: music.sale
  
  # MySQL 데이터베이스 사용 설정
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:music_sale}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&autoReconnect=true&failOverReadOnly=false&rewriteBatchedStatements=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:5}
      minimum-idle: ${DB_MIN_IDLE:2}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      connection-test-query: SELECT 1

  # JPA 설정 - 환경별로 다른 설정
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:create}  # local: create, dev: update, prod: validate
    show-sql: ${JPA_SHOW_SQL:false}  # local: true, dev/prod: false
    properties:
      hibernate:
        format_sql: ${JPA_FORMAT_SQL:true}  # local: true, dev/prod: false
        use_sql_comments: ${JPA_USE_SQL_COMMENTS:true}  # local: true, dev/prod: false
        dialect: org.hibernate.dialect.MySQLDialect
    defer-datasource-initialization: ${JPA_DEFER_DATASOURCE_INIT:false}
    sql:
      init:
        mode: ${JPA_SQL_INIT_MODE:never}  # local: never, dev: never, prod: never

  # Redis 설정
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: ${REDIS_DATABASE:0}
    timeout: ${REDIS_TIMEOUT:2000ms}
    lettuce:
      pool:
        max-active: ${REDIS_MAX_ACTIVE:8}
        max-idle: ${REDIS_MAX_IDLE:8}
        min-idle: ${REDIS_MIN_IDLE:0}
        max-wait: ${REDIS_MAX_WAIT:-1ms}
  session:
    store-type: redis
    redis:
      namespace: music-sale:session
      flush-mode: on_save
  
  # 캐시 설정
  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:600000}  # 10분
      cache-null-values: ${CACHE_NULL_VALUES:false}
      key-prefix: ${CACHE_KEY_PREFIX:music-sale:}

# JWT 설정
jwt:
  secret: ${JWT_SECRET:your-super-secret-jwt-key-here-make-it-long-and-secure}
  expiration: ${JWT_EXPIRATION_MS:86400000}

# OAuth2 설정
oauth2:
  google:
    client-id: ${GOOGLE_CLIENT_ID:}
    client-secret: ${GOOGLE_CLIENT_SECRET:}
  naver:
    client-id: ${NAVER_CLIENT_ID:}
    client-secret: ${NAVER_CLIENT_SECRET:}
    auth-uri: ${NAVER_AUTH_URI:https://nid.naver.com/oauth2.0/authorize}
    token-uri: ${NAVER_TOKEN_URI:https://nid.naver.com/oauth2.0/token}
    user-info-uri: ${NAVER_USER_INFO_URI:https://openapi.naver.com/v1/nid/me}
  kakao:
    client-id: ${KAKAO_CLIENT_ID:}
    client-secret: ${KAKAO_CLIENT_SECRET:}
    auth-uri: ${KAKAO_AUTH_URI:https://kauth.kakao.com/oauth/authorize}
    token-uri: ${KAKAO_TOKEN_URI:https://kauth.kakao.com/oauth/token}
    user-info-uri: ${KAKAO_USER_INFO_URI:https://kapi.kakao.com/v2/user/me}

# 로깅 설정
logging:
  level:
    com.music.sale: ${LOGGING_LEVEL_COM_MUSIC_SALE:DEBUG}
    org.springframework.security: ${LOGGING_LEVEL_SECURITY:INFO}
    org.hibernate.SQL: ${LOGGING_LEVEL_HIBERNATE_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOGGING_LEVEL_HIBERNATE_PARAMS:TRACE}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# API 문서 설정 (Swagger)
springdoc:
  api-docs:
    path: ${API_DOCS_PATH:/api-docs}
    enabled: ${API_DOCS_ENABLED:true}
  swagger-ui:
    path: ${SWAGGER_UI_PATH:/swagger-ui.html}
    operations-sorter: ${SWAGGER_OPERATIONS_SORTER:method}
    tags-sorter: ${SWAGGER_TAGS_SORTER:alpha}
    doc-expansion: ${SWAGGER_DOC_EXPANSION:none}
  info:
    title: ${API_INFO_TITLE:Music Sale Platform API}
    description: ${API_INFO_DESCRIPTION:악기 판매 플랫폼 API 문서}
    version: ${API_INFO_VERSION:1.0.0}
    contact:
      name: ${API_INFO_CONTACT_NAME:Music Sale Team}
      email: ${API_INFO_CONTACT_EMAIL:contact@musicsale.com}

# 모니터링 설정 (Actuator)
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,env}
      base-path: ${ACTUATOR_BASE_PATH:/actuator}
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_SHOW_DETAILS:always}
      show-components: ${ACTUATOR_HEALTH_SHOW_COMPONENTS:always}
    metrics:
      enabled: ${ACTUATOR_METRICS_ENABLED:true}
  metrics:
    export:
      prometheus:
        enabled: ${ACTUATOR_PROMETHEUS_ENABLED:false}
